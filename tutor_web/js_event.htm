<html>
<head>
	<title>線上教材：WEB 程式設計</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel=stylesheet type="text/css" href="myCss.css" />
	<base target="_blank">
	<script type="text/javascript" src="myJs.js"></script>
	<script type="text/javascript" src="shCore.js"></script>
	<script type="text/javascript" src="shBrushXml.js"></script>
	<script type="text/javascript" src="shBrushCss.js"></script>
	<script type="text/javascript" src="shBrushMine.js"></script>
	<link href="shCore.css" rel="stylesheet" type="text/css" />
	<link href="shThemeDefault.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">
		SyntaxHighlighter.all();
	</script>
	</head>

<body bgcolor="#ccccff">

<blockquote>

<script>
Gol_D_Roger("8"); // 顯示羅傑的書的章節對應
</script>

<p>前面的篇章中，我們曾提到過「onClick」和「onMouseover」等事件。事實上，還有許多常見的事件，可以增加網頁的互動性，舉例如下(如果你發現 onBeforeUnload 沒有作用，這是因為大部分的瀏覽器已經不允許該事件有自訂訊息。若要嘗試該事件的效果，可以使用 IE 瀏覽器)：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot; onLoad=&quot;alert('Hi~!')&quot; onBeforeUnload=&quot;return('bye~!')&quot;&gt;&lt;form&gt;	這是 a，onchange 會傳送內容到 c:	&lt;input type=&quot;text&quot; name=&quot;a&quot; onChange=&quot;this.form.c.value=this.form.a.value&quot;&gt;&lt;br&gt;		這是 b，onkeydown 會傳送內容到 c:	&lt;input type=&quot;text&quot; name=&quot;b&quot; onKeyDown=&quot;this.form.c.value=this.form.b.value&quot;&gt;&lt;br&gt;		這是 c，等著被 a 和 b 寫來寫去:	&lt;input type=&quot;text&quot; name=&quot;c&quot;&gt;&lt;br&gt;		這是 d，onfocus 和 onblur 時會打招呼:	&lt;input type=&quot;text&quot; name=&quot;d&quot; onFocus=&quot;this.value='Hi~'&quot; onBlur=&quot;this.value='Bye~'&quot;&gt;&lt;br&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>將事件內容寫在標籤裡面的寫法，叫做"事件屬性"。雖然標準上來說必須是小寫(例如： onclick)，但大多數的瀏覽器在解讀時，會允許大寫(onClick)。不過若是寫在 JavaScript 當中時，就必須按照語言規定，全部是小寫，並且必須以函式的形式指派事件內容：</p>
<pre class="brush: htmljs">&lt;script&gt;
document.getElementById('a').onclick = function(){
	console.log('Hi~~');
}
&lt;/script&gt;
</pre><br>

<p>或者，用「addEventListener」來指派事件：</p>
<pre class="brush: htmljs">&lt;script&gt;
document.getElementById('a').addEventListener('click', function(){
	console.log('Hi~~');
})
&lt;/script&gt;
</pre><br>

<p>除此之外，還存在其他的注意事項。例如你會發現這個範例不能動，這是因為事件在 HTML 文件結構還沒載入完成時就被指定的緣故：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;script&gt;document.getElementById('a').onclick = function(){	console.log('Hi~~');}&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;form&gt;	&lt;input type=&quot;button&quot; id=&quot;a&quot; value=&quot;按我&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>若要解決這個問題，我們可以把 JavaScript 程式片段移到相關的物件後面，或者在文件結構甚至完整內容載入完成時才來指定事件：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;script&gt;// load: 文件完整內容載入完成window.onload = function(){	document.getElementById('a').onclick = function(){		console.log('This is a~');	}}// DOMContentLoaded: 文件結構載入完成document.addEventListener(&quot;DOMContentLoaded&quot;, function(){	document.getElementById('b').onclick = function(){		console.log('This is b~');	}});&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;form&gt;	&lt;input type=&quot;button&quot; id=&quot;a&quot; value=&quot;按我(a)&quot;&gt;	&lt;input type=&quot;button&quot; id=&quot;b&quot; value=&quot;按我(b)&quot;&gt;	&lt;input type=&quot;button&quot; id=&quot;c&quot; value=&quot;按我(c)&quot;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById('c').onclick = function(){	console.log('This is c~');}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>而在 JavaScript 當中，假若你指定了某個物件的 click 事件，則除了使用者真正點擊時會觸發事件以外，也可以透過呼叫該物件的 click 方法來觸發事件。若要測試，可在操作上述範例時打開 console，輸入「document.getElementById('a').click()」。</p>

<p>關於鍵盤中，我們可以利用以下事件：</p>
<ul>
	<li>onkeydown: 按下按鍵</li>
	<li>onkeypress: 壓住按鍵</li>
	<li>onkeyup: 放開按鍵</li>
</ul>

<p>而若要知道是哪個鍵被按下，則可使用「event.keyCode」。範例如下：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;	function myTest(){		alert(event.keyCode);		return false; // 如果要將某按鍵的功能取消，則可加上 return false	}	document.onkeyup = myTest;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>若要偵測特殊按鍵以及複合鍵，亦即偵測 Ctrl, Alt, 及 Shift 或者它們跟其他按鍵一起被按下的時候(例如 複製貼上的 Ctrl+C 及 Ctrl+V)，可以這麼做：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;	function myTest(){		if(event.shiftKey &amp;&amp; event.keyCode!=16){			alert(&quot;Shift + &quot; + String.fromCharCode(event.keyCode));		}		if(event.ctrlKey &amp;&amp; event.keyCode!=17){			alert(&quot;Ctrl + &quot; + String.fromCharCode(event.keyCode));		}		if(event.altKey &amp;&amp; event.keyCode!=18){			alert(&quot;Alt + &quot; + String.fromCharCode(event.keyCode));		}	}	document.onkeydown = myTest;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>如果使用上下左右方向鍵的 keyCode，搭配上 CSS 定位資訊的改動，就可以達成利用鍵盤來控制物件的效果：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;#ccccff&quot;&gt;

&lt;script&gt;
	function myTest(){
		sq = document.getElementById(&quot;mySquare&quot;);
		if(event.keyCode == 37){ // Left
			sq.style.left = parseInt(sq.style.left) - 50 + &quot;px&quot;;
		}
		if(event.keyCode == 38){ // Up
			sq.style.top = parseInt(sq.style.top) - 50 + &quot;px&quot;;
		}
		if(event.keyCode == 39){ // Right
			sq.style.left = parseInt(sq.style.left) + 50 + &quot;px&quot;;
		}
		if(event.keyCode == 40){ // Down
			sq.style.top = parseInt(sq.style.top) + 50 + &quot;px&quot;;
		}
	}
	document.onkeydown = myTest;
&lt;/script&gt;

&lt;div id=&quot;mySquare&quot; style=&quot;position:absolute;top:20;left:20;width:50px;height:50px;background:red&quot;&gt;&lt;/div&gt;

&lt;/body&gt;&lt;/html&gt;
</pre>
<br>
<p>要讓方塊跟著滑鼠游標動的原理也非常相似，只要改用「event.clientX」以及「event.clientY」取得滑鼠座標即可：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;	function myTest(){		sq = document.getElementById(&quot;mySquare&quot;);		sq.style.left = event.clientX + 10 + &quot;px&quot;;		sq.style.top = event.clientY + 15 + &quot;px&quot;;	}	document.onmousemove = myTest;&lt;/script&gt;&lt;div id=&quot;mySquare&quot; style=&quot;position:absolute;top:20;left:20;width:50px;height:50px;background:red&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>如果你在一連串的物件上都綁上了相同的事件，則當觸發內層的物件事件時(例如以下範例中的連結)，會發現外層的事件也被觸發：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;ul id=&quot;list&quot;&gt;	&lt;li id=&quot;item&quot;&gt;Hello &lt;a id=&quot;link&quot; href=&quot;#&quot;&gt;World&lt;/a&gt;!&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;document.getElementById(&quot;list&quot;).onclick = function(){	console.log(&quot;List (ul) clicked&quot;);}document.getElementById(&quot;item&quot;).onclick = function(){	console.log(&quot;Item (li) clicked&quot;);}document.getElementById(&quot;link&quot;).onclick = function(){	console.log(&quot;Link (a) clicked&quot;);}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>這是因為 JavaScript 的事件會在 DOM (Document Object Model)上傳遞，其順序是由上到下，再由下到上，前者稱為捕獲(capture)而後者稱為冒泡(bubble)，觸發事件本身的元素則稱為目標(target)。如果想要指定事件是捕獲還是冒泡階段執行，可以用 addEventListener 的第三個參數來指定，true 代表在捕獲階段執行，false 或不傳代表在冒泡階段執行。下面這個範例把 ul, li, a 三個物件的捕獲和冒泡都綁上事件來進行觀察，但由於目標階段不會區分捕獲還是冒泡，所以若你把加入事件的順序調換，則會發現 console 輸出的順序也會跟著調換：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;ul id=&quot;list&quot;&gt;	&lt;li id=&quot;item&quot;&gt;Hello &lt;a id=&quot;link&quot; href=&quot;#&quot;&gt;World&lt;/a&gt;!&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;document.getElementById(&quot;list&quot;).addEventListener(	'click', function(){		console.log(&quot;List (ul) clicked (capture)&quot;);	}, true);document.getElementById(&quot;item&quot;).addEventListener(	'click', function(){		console.log(&quot;Item (li) clicked (capture)&quot;);	}, true);document.getElementById(&quot;link&quot;).addEventListener(	'click', function(){		console.log(&quot;Link (a) clicked (capture)&quot;);	}, true);document.getElementById(&quot;list&quot;).addEventListener(	'click', function(){		console.log(&quot;List (ul) clicked (bubble)&quot;);	}, false);document.getElementById(&quot;item&quot;).addEventListener(	'click', function(){		console.log(&quot;Item (li) clicked (bubble)&quot;);	});document.getElementById(&quot;link&quot;).addEventListener(	'click', function(){		console.log(&quot;Link (a) clicked (bubble)&quot;);	});&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>如果想要停止事件的傳遞，可以使用「stopPropagation」或者「stopImmediatePropagation」。兩者都可以阻止事件繼續傳遞，但使用前者時，同一層級的其他 listener 還是會被執行，而後者則否。下面這個範例，在 li 的捕獲階段加上「stopPropagation」，以展示其效果：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;ul id=&quot;list&quot;&gt;	&lt;li id=&quot;item&quot;&gt;Hello &lt;a id=&quot;link&quot; href=&quot;#&quot;&gt;World&lt;/a&gt;!&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;document.getElementById(&quot;list&quot;).addEventListener(	'click', function(){		console.log(&quot;List (ul) clicked (capture)&quot;);	}, true);document.getElementById(&quot;item&quot;).addEventListener(	'click', function(e){		console.log(&quot;Item (li) clicked (capture)&quot;);		e.stopPropagation();	}, true);document.getElementById(&quot;link&quot;).addEventListener(	'click', function(){		console.log(&quot;Link (a) clicked (capture)&quot;);	}, true);document.getElementById(&quot;list&quot;).addEventListener(	'click', function(){		console.log(&quot;List (ul) clicked (bubble)&quot;);	}, false);document.getElementById(&quot;item&quot;).addEventListener(	'click', function(){		console.log(&quot;Item (li) clicked (bubble)&quot;);	});document.getElementById(&quot;link&quot;).addEventListener(	'click', function(){		console.log(&quot;Link (a) clicked (bubble)&quot;);	});&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
</blockquote>

</body></html>
