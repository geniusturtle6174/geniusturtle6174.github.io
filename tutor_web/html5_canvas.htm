<html>
<head>
	<title>線上教材：WEB 程式設計</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel=stylesheet type="text/css" href="myCss.css" />
	<base target="_blank">
	<script type="text/javascript" src="myJs.js"></script>
	<script type="text/javascript" src="shCore.js"></script>
	<script type="text/javascript" src="shBrushMine.js"></script>
	<link href="shCore.css" rel="stylesheet" type="text/css" />
	<link href="shThemeDefault.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">
		SyntaxHighlighter.all();
	</script>
	</head>

<body bgcolor="#ccccff">

<blockquote>

<p>HTML 5 的「canvas」標籤，提供了一塊繪圖區(畫布)，讓你透過「canvas」擁有的非常豐富的 API，畫出線條、矩形、文字等等。在繪圖區進行繪圖的步驟大致如下：</p>
<ol>
	<li>使用「canvas」標籤，在網頁上插入繪圖區</li>
	<li>在 JavaScript 當中取得繪圖環境</li>
	<li>使用各種方法進行繪圖</li>
</ol>

<p>另外，我們也必須瞭解「canvas」的座標系統：左上角為原點，X 軸向右為正，Y 軸向下為正。</p>


<p>下列範例會畫出一個填滿的矩形，和一個只有框線的矩形。繪製矩形的四個參數，則分別是左上角 x、左上角 y、寬度，以及高度。另外，我們為了清楚認出畫布的位置，所以替它也加上了框線：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境ctx.fillStyle = &quot;#def&quot;; // 用以填滿的色彩(以CSS語法指定色彩)。ctx.fillRect(20, 40, 100, 150);ctx.strokeStyle = &quot;#f77&quot;; // 用以畫框線的色彩(以CSS語法指定色彩)。ctx.strokeRect(30, 60, 150, 250);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>也可以在 canvas 上面畫出漸層。關於繪製漸層，主要有這幾個函式：</p>
<ul>
	<li>createLinearGradient(x1, y1, x2, y2): 從座標(x1, y1)往座標(x2, y2)建立直線變化的漸層</li>
	<li>createRadialGradient(x1, y1, r1, x2, y2, r2): 在圓心座標(x1, y1)半徑 r1 的圓與圓心座標(x2, y2)半徑 r2 的圓之間，建立圓型變化的漸層</li>
	<li>addColorStop(offset, color): offset是 0~1 之間的浮點數，0 對應漸層起點，1 對應漸層終點。color 為在該位置設立的漸層邊界顏色</li>
</ul>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境var grad = ctx.createLinearGradient(100, 100, 300, 300); // 傳回一個 CanvasGradient 物件// 幫該物件加上漸層邊界grad.addColorStop(0.00, &quot;red&quot;);grad.addColorStop(0.14, &quot;orange&quot;);grad.addColorStop(0.29, &quot;yellow&quot;);grad.addColorStop(0.49, &quot;green&quot;);grad.addColorStop(0.57, &quot;blue&quot;);grad.addColorStop(0.86, &quot;indigo&quot;);grad.addColorStop(1.00, &quot;purple&quot;);ctx.fillStyle = grad; // 將物件用於 fillStylectx.fillRect(100, 100, 200, 200);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>要畫出比較複雜的圖案，則必須使用"路徑"。基本的步驟如下：</p>
<ol>
	<li>使用「beginPath」重新開始路徑</li>
	<li>呼叫各種方法建立路徑</li>
	<li>使用「stroke」畫出路徑，或者用「fill」填滿路徑</li>
</ol>

<p>我們先從直線開始看起。其中，由於我們沒有設定顏色，所以會使用預設的黑色：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境ctx.beginPath();ctx.moveTo(50, 50);ctx.lineTo(100, 200);ctx.stroke();ctx.moveTo(100, 100);ctx.lineTo(400, 200);ctx.stroke();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>使用「arc」可以畫出圓弧，參數意義依序如下：</p>
<ol>
	<li>圓心 x 座標、圓心 y 座標、圓半徑</li>
	<li>起始角度、結束角度(單位為弧度，x 軸正向為 0，y 軸正向為 &pi;/2)</li>
	<li>逆時針或順時針繪製(true/false)</li>
</ol>

<p>以下範例，會畫出兩個圓弧：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境ctx.strokeStyle = &quot;#f33&quot;;ctx.beginPath();ctx.arc(200, 200, 100, 0, Math.PI/2, true);ctx.stroke();ctx.beginPath();ctx.arc(200, 200, 50, 0, Math.PI/3, false);ctx.stroke();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>在上述範例中，如果你使用「fill」，可能會發現得到的圖不是扇形。要畫出扇形，必須先用「moveTo」移動到圓心，再搭配「closePath」，將路徑封閉起來：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境ctx.fillStyle = &quot;#f00&quot;;ctx.beginPath();ctx.moveTo(200, 200);ctx.arc(200, 200, 100, 0, Math.PI/2, true);ctx.closePath();ctx.fill();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>使用「strokeText」或「fillText」，分別可以畫出文字外框，或者填滿文字。其中，「font」屬性可以讓你用 CSS 語法來設定文字樣式；而「textAlign」屬性的"center"代表指定的座標是文字區塊的中點，預設為"start"(座標為文字區塊的左上角)。範例如下：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境ctx.strokeStyle = &quot;#f33&quot;;ctx.font = '50px 標楷體';ctx.textAlign = 'center';ctx.strokeText(&quot;這是測試&quot;, 100, 100);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>其餘如設定線條樣式、裁剪區域、陰影、變形等等效果，就不一一示範。</p>

<p>如果要畫出影像，則需使用「drawImage」函式。它有三種呼叫方法：</p>
<ul>
	<li>drawImage(img, x, y): 從座標(x, y)開始繪製 img 所指定的影像。繪製出的影像大小為原尺寸。</li>
	<li>drawImage(img, x, y, w, h): 從座標(x, y)開始繪製 img 所指定的影像。繪製出的影像大小為寬 w 與高 h 。</li>
	<li>drawImage(img, sx, sy, sw, sh, x, y, w, h): 將影像切割出一部分來顯示。影像會從座標(sx, sy)被切出寬 sw ，高 sh 的區塊，被繪製在座標(x, y)，寬 w 與高 h 的區域。</li>
</ul>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境var img = document.createElement(&quot;img&quot;); // 建立元素// 設定相關屬性img.src = &quot;../pics/alan.jpg&quot;;img.onload = function(){ // 影像載入後，執行裡面的內容	ctx.drawImage(img, 100, 100, 100, 200); // 畫出影像}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>也可以對繪製出的影像，進行像素運算，意即讓你直接操作影像的個別像素。此範例中用到兩個函式，說明如下：</p>
<ul>
	<li>getImageData(x, y, w, h): 從座標(x, y)開始，擷取出寬 w 高 h 的影像，並以影像物件的方式回傳。</li>
	<li>putImageData(imageObject, x1, y1 [, x2, y2, w, h]): 從座標(x1, y1)開始，繪出 imageObject 之內容。若要指定繪製的影像範圍，可以再加上影像的起始座標(x2, y2) 和寬 w 高 h。</li>
</ul>

<p>其中，所謂的影像物件，包含了「width」、「height」屬性，分別代表寬與高，以及「data」屬性，代表像素資料。像素資料是以 row-major 的型式存放，每四個數值(紅、綠、藍、透明度)一組，範圍都在 0~255 之間。所以 data[0]~data[3] 代表第一個像素的相關數值，data[4]~data[7]代表第二個像素的相關數值，依此類推。</p>

<p>負片效果的範例如下：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境var img = document.createElement(&quot;img&quot;);img.onload = function(){	canvas.width = img.width;	canvas.height = img.height;	ctx.drawImage(img,0,0);	var imgObj = ctx.getImageData(0, 0, img.width, img.height);	for(i=0;i&lt;=imgObj.data.length;i+=4){		imgObj.data[i] = 255 - imgObj.data[i];		imgObj.data[i+1] = 255 - imgObj.data[i+1];		imgObj.data[i+2] = 255 - imgObj.data[i+2];	}	ctx.putImageData(imgObj, 0 ,0);}img.src = &quot;../pics/bg01.jpg&quot;;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>3 x 3 平均模糊的範例如下(為了讓各位更容易看出效果，範例中進行了四次模糊)：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境var img = document.createElement(&quot;img&quot;);img.src = &quot;../pics/bg01.jpg&quot;;var imgObj;function myBlur(){	w = imgObj.width;	h = imgObj.height;	for(var x=1;x&lt;w-1;x++){		for(var y=1;y&lt;h-1;y++){			var base_c = y * (4 * w) + x * 4;			var base_lu = (y - 1) * (4 * w) + (x - 1) * 4;			var base_u = (y - 1) * (4 * w) + x * 4;			var base_ru = (y - 1) * (4 * w) + (x + 1) * 4;			var base_r = y * (4 * w) + (x + 1) * 4;			var base_rd = (y + 1) * (4 * w) + (x + 1) * 4;			var base_d = (y + 1) * (4 * w) + x * 4;			var base_ld = (y + 1) * (4 * w) + (x - 1) * 4;			var base_l = y * (4 * w) + (x - 1) * 4;			imgObj.data[base_c+0] = (imgObj.data[base_lu+0]+imgObj.data[base_u+0]+imgObj.data[base_ru+0]+									 imgObj.data[base_l+0] +imgObj.data[base_c+0]+imgObj.data[base_r+0]+									 imgObj.data[base_ld+0]+imgObj.data[base_d+0]+imgObj.data[base_rd+0]) / 9; // red			imgObj.data[base_c+1] = (imgObj.data[base_lu+1]+imgObj.data[base_u+1]+imgObj.data[base_ru+1]+									 imgObj.data[base_l+1] +imgObj.data[base_c+1]+imgObj.data[base_r+1]+									 imgObj.data[base_ld+1]+imgObj.data[base_d+1]+imgObj.data[base_rd+1]) / 9; // green			imgObj.data[base_c+2] = (imgObj.data[base_lu+2]+imgObj.data[base_u+2]+imgObj.data[base_ru+2]+									 imgObj.data[base_l+2] +imgObj.data[base_c+2]+imgObj.data[base_r+2]+									 imgObj.data[base_ld+2]+imgObj.data[base_d+2]+imgObj.data[base_rd+2]) / 9; // blue					}	}	}img.onload = function(){	canvas.width = img.width * 2;	canvas.height = img.height;	ctx.drawImage(img, 0, 0);	imgObj = ctx.getImageData(0, 0, img.width, img.height);	myBlur();	myBlur();	myBlur();	myBlur();	ctx.putImageData(imgObj, img.width, 0);}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>Canvas 也可以和滑鼠互動。另外，「toDataURL」可以將繪圖區的內容存成圖片：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas width=&quot;500&quot; height=&quot;1000&quot; id=&quot;myCanvas&quot; style=&quot;border:1px solid;position:absolute;top:100;left:100;&quot;&gt;&lt;/canvas&gt;&lt;input type=&quot;button&quot; id=&quot;save&quot; value=&quot;在新視窗開啟圖片&quot;&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境var drawMode, mx, my;canvas.onmousedown = function(ev){	ctx.beginPath();	ctx.strokeStyle = &quot;#000&quot;;	ctx.lineWidth = 1;	mx = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;	my = event.clientY - parseInt(canvas.style.top) + window.pageYOffset;	ctx.moveTo(mx, my);	drawMode = true;}canvas.onmousemove = function(ev){	if(drawMode){		mx = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;		my = event.clientY - parseInt(canvas.style.top) + window.pageYOffset;		ctx.lineTo(mx, my);		ctx.stroke();	}}canvas.onmouseup = function(){	drawMode = false;}document.getElementById(&quot;save&quot;).onclick = function(){	new_win = window.open();	new_win.document.write(&quot;&lt;img src='&quot; + ctx.canvas.toDataURL('img/png') + &quot;'&gt;&quot;)}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>如果配合"清除後再重繪"的步驟，就可以達到更為動態的效果：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas width=&quot;500&quot; height=&quot;500&quot; id=&quot;myCanvas&quot; style=&quot;border:1px solid;position:absolute;top:100;left:100;&quot;&gt;&lt;/canvas&gt;&lt;input type=&quot;button&quot; id=&quot;draw&quot; value=&quot;畫圖&quot;&gt;&lt;input type=&quot;button&quot; id=&quot;drag&quot; value=&quot;拖曳&quot;&gt;&lt;input type=&quot;button&quot; id=&quot;nothing&quot; value=&quot;取消動作&quot;&gt;&lt;script&gt;var canvas = document.getElementById(&quot;myCanvas&quot;); // 取得物件var ctx = canvas.getContext(&quot;2d&quot;); // 取得繪圖環境var mode = '', drawing = false, oriX, oriY, mx, my, offsetX, offsetY, dist;var oldImg, shapes = [], color;document.getElementById('draw').onclick = function(){mode = 'draw'};document.getElementById('drag').onclick = function(){mode = 'drag'};document.getElementById('nothing').onclick = function(){mode = ''};function drawCircle(x, y, r, color){	ctx.beginPath();	ctx.fillStyle = color;	ctx.arc(x, y, r, 0, Math.PI*2, true);	ctx.fill();}function dist(x1, y1, x2, y2){	return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));}function drawShapes(){	ctx.clearRect(0, 0, 500, 500);	for(i=0;i&lt;shapes.length;i++){		drawCircle(shapes[i].x, shapes[i].y, shapes[i].r, shapes[i].color);	}}canvas.onmousedown = function(ev){	mx = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;	my = event.clientY - parseInt(canvas.style.top) + window.pageYOffset;	if(mode == 'draw'){		oldImg = ctx.getImageData(0, 0, 500, 500);		color = &quot;#&quot; + Math.floor(Math.random() * 1000000);			oriX = mx;		oriY = my;		drawing = true;	}	else if(mode == 'drag'){		for(i=shapes.length-1;i&gt;=0;i--){			if(dist(mx, my, shapes[i].x, shapes[i].y) &lt; shapes[i].r){				var tmp = shapes[i];				shapes.splice(i, 1);				shapes.push(tmp);				offsetX = mx - shapes[shapes.length-1].x;				offsetY = my - shapes[shapes.length-1].y;				drawing = true;				break;			}		}	}}canvas.onmousemove = function(ev){	mx = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;	my = event.clientY - parseInt(canvas.style.top) + window.pageYOffset;	if(drawing &amp;&amp; mode == 'draw'){		ctx.clearRect(0, 0, 500, 500);		ctx.putImageData(oldImg, 0, 0);		drawCircle(oriX, oriY, dist(oriX,oriY,mx,my), color);	}	else if(drawing &amp;&amp; mode == 'drag'){		shapes[shapes.length-1].x = mx - offsetX;		shapes[shapes.length-1].y = my - offsetY;		drawShapes();	}}canvas.onmouseup = function(){	if(mode == 'draw'){		mx = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;		my = event.clientY - parseInt(canvas.style.top) + window.pageYOffset;		drawCircle(oriX, oriY, dist(oriX,oriY,mx,my));		shapes.push({			x: oriX,			y: oriY,			r: Math.sqrt(Math.pow(oriX-mx,2) + Math.pow(oriY-my,2)),			color: ctx.fillStyle		});	}	drawing = false;}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
</blockquote>

</body></html>
