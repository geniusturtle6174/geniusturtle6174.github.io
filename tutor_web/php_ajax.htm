<html>
<head>
	<title>線上教材：WEB 程式設計</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel=stylesheet type="text/css" href="myCss.css" />
	<base target="_blank">
	<script type="text/javascript" src="myJs.js"></script>
	<script type="text/javascript" src="shCore.js"></script>
	<script type="text/javascript" src="shBrushXml.js"></script>
	<script type="text/javascript" src="shBrushMine.js"></script>
	<link href="shCore.css" rel="stylesheet" type="text/css" />
	<link href="shThemeDefault.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">
		SyntaxHighlighter.all();
	</script>
	</head>

<body bgcolor="#ccccff">

<blockquote>

<p>
傳統上，伺服器每處理一個請求，都需要重新載入網頁才能顯示結果，由於即使是一小部分的改變也必須重新載入整個網頁，因此加重了伺服器與頻寬的負擔，而透過"非同步傳輸"，即可解決這類問題。我們可以透過隱藏式的「iframe」或者 Ajax 來達成"非同步傳輸"的功能，不過本篇將專注在 Ajax 的介紹。
</p>

<p>
其實 Ajax (Asynchronous JavaScript and XML)不是單一技術的名稱，而且出現的相當早。大約在 1998 年左右，微軟的一個小組就做出了允許客戶端指令碼(例如 JavaScript)發送出 http 請求的元件。而 Ajax 這個名詞，直到 2005 年才被創造出來。其使用方式主要包含以下步驟：</p>
<ol>
	<li>用戶端設定相關物件，對伺服器發出要求</li>
	<li>伺服端程式處理要求</li>
	<li>用戶端接收與顯示結果</li>
</ol>

<p>我們先來看一個顯示伺服器時間的範例。以下是一支 PHP 程式碼，作用是很單純的印出伺服器時間，所以你點進去網頁時，顯示的是當下的伺服器時間，而如果你不斷的重新整理，就可以看到最新的伺服器時間：</p>
<pre class="brush: htmljsphp">&lt;?phpdate_default_timezone_set('Asia/Taipei');echo date('Y-m-d H:i:s'); ?&gt;</pre>
<br>
<p>而我們可以製作以下的客戶端程式，定時的向伺服器提出取得該網頁內容的要求，就相當於用程式代替你點進去上面的 PHP 程式，並定時的重新整理：</p>
<pre class="brush: htmljs">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;p id=&quot;showTimeHere&quot;&gt;&lt;/p&gt;&lt;script&gt;var xhr;// 設定物件if(window.ActiveXObject){	xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);}else if(window.XMLHttpRequest){	xhr = new XMLHttpRequest();}setInterval(()=&gt;{	xhr.open(&quot;POST&quot;, &quot;ajax_time.php&quot;);	xhr.send();}, 1000);// 追蹤處理過程xhr.onreadystatechange = function(){	if(xhr.readyState == 4){		if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){			document.getElementById(&quot;showTimeHere&quot;).innerHTML = xhr.responseText;		}		else {			document.getElementById(&quot;showTimeHere&quot;).innerHTML = &quot;Error!&quot;;		}	}}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>這個範例的說明如下。首先，我們經由以下的程式碼，來建立物件：</p>
<pre class="brush: htmljs">if(window.ActiveXObject){
	xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
}else if(window.XMLHttpRequest){
	xhr = new XMLHttpRequest();
}</pre><br>

<p>再來，必須設定資料傳送方式，以及送出請求。範例中使用 setInterval，只是為了能每秒送出一次請求。另外，如果是使用較舊版的 IE，可能會發現只會顯示一次時間，而不是每秒變動，這是由於快取產生的問題。</p>
<pre class="brush: htmljs">xhr.open(&quot;POST&quot;, &quot;ajax_time.php&quot;);
xhr.send();</pre><br>

<p>最後，是接收與顯示結果的部分。其中，「readyState」代表目前的請求狀態，其值是 4 時為傳送完成。而「status」則為伺服器回傳的狀態，200~299 都代表成功，其餘較常聽到的錯誤狀態碼則例如 404 是"Not Found"。</p>
<pre class="brush: htmljs">xhr.onreadystatechange = function(){
	if(xhr.readyState==4){
		if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300){
			document.getElementById(&quot;showTimeHere&quot;).innerHTML = xhr.responseText;
		}
		else {
			document.getElementById(&quot;showTimeHere&quot;).innerHTML = &quot;Error!&quot;;
		}
	}
}</pre><br>

<p>另外需要注意的是，如果遇上網路延遲等狀況，較晚發出的 setInterval 有可能比較早發出的還早收到結果。因此，比較好的做法，還是需要使用 setTimeout 來處理請求的送出。以下範例會在一開始呼叫一次，然後在每次傳送成功時預約下一次：</p>
<pre class="brush: htmljs">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;p id=&quot;showTimeHere&quot;&gt;&lt;/p&gt;&lt;script&gt;var xhr;if(window.ActiveXObject){	xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);}else if(window.XMLHttpRequest){	xhr = new XMLHttpRequest();}function askServerTime(){	xhr.open(&quot;POST&quot;, &quot;ajax_time.php&quot;);	xhr.send();};askServerTime();xhr.onreadystatechange = function(){	if(xhr.readyState == 4){		if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300){			document.getElementById(&quot;showTimeHere&quot;).innerHTML = xhr.responseText;		}		else {			document.getElementById(&quot;showTimeHere&quot;).innerHTML = &quot;Error!&quot;;		}		setTimeout(askServerTime, 1000);	}}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>透過 jQuery，可以讓我們更方便的使用 Ajax。上述範例(為求範例簡單，仍使用 setInterval 的版本)的程式碼可以修改如下：</p>
<pre class="brush: htmljs">&lt;html&gt;&lt;head&gt;	&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;p id=&quot;showTimeHere&quot;&gt;&lt;/p&gt;&lt;script&gt;setInterval(()=&gt;$(&quot;#showTimeHere&quot;).load(&quot;ajax_time.php&quot;), 1000);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>最主要的語法如下。「load」方法帶入的參數是請求的 url，此方法會將取得之資料，設定給前面選出的元素。</p>
<pre class="brush: htmljs">$(&quot;#showTimeHere&quot;).load(&quot;ajax_time.php&quot;);</pre><br>

<p>「load」方法還有另外兩個參數，分別是：</p>
<ul>
	<li>parameters: 帶到伺服器端查詢的參數。
		如果省略此參數或使用字串形式，則使用 GET 方式送出；
		如果使用物件或陣列，則是用 POST 的方式送出</li>
	<li>callback: 一個函式，會在請求完成後被呼叫。</li>
</ul>

<p>以下用數字相加的範例，示範以 load 方法進行 POST 方式的傳輸。伺服端部份的程式碼依然非常簡易，只需要收到數字並相加及印出，如下：</p>
<pre class="brush: htmljsphp">&lt;?php$a = (int)$_POST[&quot;a&quot;];$b = (int)$_POST[&quot;b&quot;];echo $a + $b;?&gt;</pre>
<br>
<p>客戶端部份的程式碼則如下。如果要嘗試 GET 的方式，可以把 key-value 形式指定的參數，換成註解中的字串形式，並在伺服端的部份也進行相對應的修改：</p>
<pre class="brush: htmljs">&lt;html&gt;&lt;head&gt;	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;	&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function myCalc(){	$(&quot;#result&quot;).load(		&quot;ajax_ab_post.php&quot;,		{			a: $(&quot;#a&quot;).val(),			b: $(&quot;#b&quot;).val()		},		// &quot;a=&quot; + $(&quot;#a&quot;).val() + &quot;&amp;b=&quot; + $(&quot;#b&quot;).val(),		function(){			alert(&quot;計算完成&quot;);		}	);}&lt;/script&gt;&lt;form&gt;	&lt;input type=&quot;text&quot; id=&quot;a&quot; value=&quot;1&quot;&gt; +	&lt;input type=&quot;text&quot; id=&quot;b&quot; value=&quot;2&quot;&gt;	&lt;input type=&quot;button&quot; value=&quot;=&quot; onclick=&quot;myCalc();&quot;&gt;	&lt;p id=&quot;result&quot;&gt;&lt;/p&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>如果希望自行處理資料，而不只是單純的把結果塞到某個元素去的話，則可以可以把「load」方法改成「get」或「post」方法。這兩個方法除了傳輸方式以外，沒有什麼差別。另外，這兩個方法比「load」多了一個參數，用於指定回傳結果的解讀方式(唯此處未展示)，預設會自動偵測，你也可以明確指定。以下這組範例仍然是 a + b 的計算，伺服端的 PHP 程式碼完全一樣，只在客戶端做了一點變更：</p>
<pre class="brush: htmljs">&lt;html&gt;&lt;head&gt;	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;	&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function myCalc(){	$.post(		&quot;ajax_ab_post.php&quot;,		{			a: $(&quot;#a&quot;).val(),			b: $(&quot;#b&quot;).val()		},		function(responseStr){			alert(&quot;計算完成，結果是: &quot; + responseStr);		}	);}&lt;/script&gt;&lt;form&gt;	&lt;input type=&quot;text&quot; id=&quot;a&quot; value=&quot;1&quot;&gt; +	&lt;input type=&quot;text&quot; id=&quot;b&quot; value=&quot;2&quot;&gt;	&lt;input type=&quot;button&quot; value=&quot;=&quot; onclick=&quot;myCalc();&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>接著我們來看看比較進階的匿名聊天室範例，資料表的參考設定如下，設定完成的資料表可直接在<a href="examples/chat.sql">這裡</a>下載。</p>
<ul>
	<li>id: 訊息編號，類型 INT，主鍵，自動遞增</li>
	<li>time: 訊息時間，類型 TIMESTAMP，預設值 CURRENT_TIMESTAMP</li>
	<li>nickname: 綽號，類型 VARCHAR，長度 512</li>
	<li>msg: 訊息內容，類型 VARCHAR，長度 512</li>
	<li>ip: 留言 IP，類型 VARCHAR，長度 64</li>
</ul>

<p>伺服端接收資料的部分如下，單純的負責把收到的訊息塞進資料庫：</p>
<pre class="brush: htmljs">&lt;?phpinclude(&quot;pdoInc.php&quot;);function getIp(){	return $_SERVER['REMOTE_ADDR'];}if(isset($_POST[&quot;nickname&quot;]) &amp;&amp; isset($_POST[&quot;msg&quot;]) &amp;&amp; $_POST[&quot;nickname&quot;] != '' &amp;&amp; $_POST[&quot;msg&quot;] != ''){	$sth = $dbh-&gt;prepare('INSERT INTO chat (nickname, msg, ip) VALUES (?, ?, ?)');	$sth-&gt;execute(array($_POST[&quot;nickname&quot;], $_POST[&quot;msg&quot;], getIp()));}?&gt;</pre>
<br>
<p>伺服端取出訊息的部分則如下，負責部份是顯示最新的 500 筆訊息。此處在輸出格式的部份使用了 JSON，以便讓客戶端在有需要時，可以很容易的變更顯示格式：</p>
<pre class="brush: htmljs">&lt;?phpinclude(&quot;pdoInc.php&quot;);$sth = $dbh-&gt;prepare(	'SELECT * FROM (SELECT * from chat ORDER BY time DESC LIMIT 500) AS OAO ORDER BY time');$sth-&gt;execute();$resultArr = array();while($row = $sth-&gt;fetch(PDO::FETCH_ASSOC)){	$resultArr[] = array(		'nickname' =&gt; htmlspecialchars($row[&quot;nickname&quot;]),		'msg' =&gt; htmlspecialchars($row[&quot;msg&quot;]),		'time' =&gt; $row[&quot;time&quot;],	);}echo json_encode($resultArr);?&gt;</pre>
<br>
<p>客戶端的程式碼如下，負責向伺服器送出訊息，以及每隔 1 秒向伺服器抓取最新的訊息：</p>
<pre class="brush: htmljs">&lt;html&gt;&lt;head&gt;	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;	&lt;style&gt;		table, tr, td {			border: 1px dashed;		}		table {			width: 100%;			height: 100%;		}		#showMsgHere {			width: 100%;			height: 100%;			font-size: 20px;			resize: none;		}	&lt;/style&gt;	&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;	&lt;script&gt;	function sendMsg(){		$.post(			&quot;ajax_chatroom_insert.php&quot;,			{				nickname: $(&quot;#nickname&quot;).val(),				msg: $(&quot;#msg&quot;).val()			}		);		$(&quot;#msg&quot;).val(&quot;&quot;);	}		function showMsg(){		$.get(			&quot;ajax_chatroom_disp.php&quot;,			{},			response =&gt; {				str = &quot;&quot;;				response.forEach(item =&gt; {					str += item['nickname'] + &quot;(&quot; + item['time'] + &quot;): &quot; + item['msg'] + &quot;\n&quot;;				});				$(&quot;#showMsgHere&quot;).val(str);			},			'json'		);	}		$(function(){		// 定時抓取訊息		setInterval(showMsg, 1000);		// 按下 enter 後送出訊息		$(&quot;#msg&quot;).bind(&quot;keydown&quot;,			function(e){				if(e.which == 13){					sendMsg();				}			}		)	})	&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;Basic version&lt;table&gt;	&lt;tr height=&quot;90%&quot;&gt;&lt;td&gt;&lt;textarea id=&quot;showMsgHere&quot; disabled=&quot;disabled&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;		&lt;form&gt;			&lt;input type=&quot;text&quot; id=&quot;nickname&quot; placeholder=&quot;暱稱&quot; style=&quot;width:5em;height:2em&quot;&gt;			&lt;input type=&quot;text&quot; id=&quot;msg&quot; placeholder=&quot;訊息&quot; style=&quot;width:70em;height:2em&quot;&gt;			&lt;input type=&quot;button&quot; value=&quot;送出&quot; onclick=&quot;sendMsg();&quot;&gt;		&lt;/form&gt;	&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>
由於上面的範例是每次都會重新抓取 500 筆，因此我們可以再稍做一點修改，例如在伺服器取得訊息時，順便利用 SESSION 記錄最新的 id，則當客戶端說"我只要新的訊息"時，伺服端就可以依此只撈取新增的資料出來。伺服端僅有撈取訊息時需要修改，主要是加上 id 做為 SELECT 時的條件：</p>
<pre class="brush: htmljs">&lt;?phpsession_start();include(&quot;pdoInc.php&quot;);if( isset($_GET['getNewMsgOnly']) &amp;&amp; (int)$_GET['getNewMsgOnly'] == 0 || !isset($_SESSION['lastMsgId'])){	$lastMsgId = 0;}else {	$lastMsgId = $_SESSION['lastMsgId'];}$sth = $dbh-&gt;prepare(	'SELECT * FROM (SELECT * from chat WHERE id &gt; ? ORDER BY id DESC LIMIT 500) AS OAO ORDER BY id');$sth-&gt;execute(array($lastMsgId));$resultArr = array();if($sth-&gt;rowCount() &gt; 0){	while($row = $sth-&gt;fetch(PDO::FETCH_ASSOC)){		$resultArr[] = array(			'nickname' =&gt; htmlspecialchars($row[&quot;nickname&quot;]),			'msg' =&gt; htmlspecialchars($row[&quot;msg&quot;]),			'time' =&gt; $row[&quot;time&quot;],		);		$_SESSION['lastMsgId'] = $row[&quot;id&quot;];	}}echo json_encode($resultArr);?&gt;</pre>
<br>
<p>客戶端則修改為只有第一次會抓取全部訊息，之後只會抓取新的並附加到顯示區。另外，原本的定時抓取(setInterval)，改為抓取成功後再預約下一次(setTimeout)：
</p>
<pre class="brush: htmljs">&lt;html&gt;&lt;head&gt;	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;	&lt;style&gt;		table, tr, td {			border: 1px dashed;		}		table {			width: 100%;			height: 100%;		}		#showMsgHere {			width: 100%;			height: 100%;			font-size: 20px;			resize: none;		}	&lt;/style&gt;	&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.11.0.min.js&quot;&gt;&lt;/script&gt;	&lt;script&gt;	function sendMsg(){		$.post(			&quot;ajax_chatroom_insert.php&quot;,			{				nickname: $(&quot;#nickname&quot;).val(),				msg: $(&quot;#msg&quot;).val()			}		);		$(&quot;#msg&quot;).val(&quot;&quot;);	}		function showMsg(getNewMsgOnly){		$.get(			&quot;ajax_chatroom_disp_v2.php&quot;,			{				'getNewMsgOnly': getNewMsgOnly			},			response =&gt; {				str = &quot;&quot;;				response.forEach(item =&gt; {					str += item['nickname'] + &quot;(&quot; + item['time'] + &quot;): &quot; + item['msg'] + &quot;\n&quot;;				});				$(&quot;#showMsgHere&quot;).append(str);				setTimeout(&quot;showMsg(1)&quot;, 1000);			},			'json'		);	}		$(function(){		// 網頁載入，抓取全部訊息		showMsg(0);		// 按下 enter 後送出訊息		$(&quot;#msg&quot;).bind(&quot;keydown&quot;,			function(e){				if(e.which == 13){					sendMsg();				}			}		)	})	&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;Get-only-new-msg version&lt;table&gt;	&lt;tr height=&quot;90%&quot;&gt;&lt;td&gt;&lt;textarea id=&quot;showMsgHere&quot; disabled=&quot;disabled&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;	&lt;tr&gt;&lt;td&gt;		&lt;form&gt;			&lt;input type=&quot;text&quot; id=&quot;nickname&quot; placeholder=&quot;暱稱&quot; style=&quot;width:5em;height:2em&quot;&gt;			&lt;input type=&quot;text&quot; id=&quot;msg&quot; placeholder=&quot;訊息&quot; style=&quot;width:70em;height:2em&quot;&gt;			&lt;input type=&quot;button&quot; value=&quot;送出&quot; onclick=&quot;sendMsg();&quot;&gt;		&lt;/form&gt;	&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>
前述範例的做法，都是由客戶端不斷地定時向伺服器發出請求，並且每一次的請求都是完整的連線週期(結束後會斷開連線)，此種做法稱之為"polling"(輪詢)。因此為了減少連線次數，來避免要密集的傳送那些幾乎不會改變的標頭資料，而演化出了稱為"long polling"的方法，此方法的概念是當發出請求後，只在有資料或者 timeout 的時候會斷線。
</p>

<p>在以下的範例中，客戶端的程式碼只需要修改拿取訊息的 PHP 連結，請點選<a href="examples/ajax_chatroom_longpoll.htm">這裡</a>觀看。伺服器端的程式碼，則要改成在迴圈內偵測是否有新訊息，而如果需要用到 SESSION 來記錄，則可以將 SESSION 在不必要時關閉，以免其他頁面被鎖住。另外，此範例為了不與上一個範例衝突，故將 SESSION 名稱更換，如下：</p>
<pre class="brush: htmljs">&lt;?phpsession_start();include(&quot;pdoInc.php&quot;);if( isset($_GET['getNewMsgOnly']) &amp;&amp; (int)$_GET['getNewMsgOnly'] == 0 || !isset($_SESSION['lastMsgID_longpoll'])){	$lastMsgId = 0;}else {	$lastMsgId = $_SESSION['lastMsgID_longpoll'];}session_write_close();$sth = $dbh-&gt;prepare(	'SELECT * FROM (SELECT * from chat WHERE id &gt; ? ORDER BY id DESC LIMIT 500) AS OAO ORDER BY id');$resultArr = array();error_reporting(0);while(true){	$sth-&gt;execute(array($lastMsgId));	$flag = 0;	if($sth-&gt;rowCount() &gt; 0){		session_start();		$flag = 1;		while($row = $sth-&gt;fetch(PDO::FETCH_ASSOC)){			$resultArr[] = array(				'nickname' =&gt; htmlspecialchars($row[&quot;nickname&quot;]),				'msg' =&gt; htmlspecialchars($row[&quot;msg&quot;]),				'time' =&gt; $row[&quot;time&quot;],			);			$_SESSION['lastMsgID_longpoll'] = $row[&quot;id&quot;];		}		$lastMsgId = $_SESSION['lastMsgID_longpoll'];		session_write_close();	}	$sth-&gt;closeCursor();	if(1 == $flag){		break;	}	sleep(1);}echo json_encode($resultArr);?&gt;</pre>
<br>
</blockquote>

</body></html>
