<html>
<head>
	<title>線上教材：WEB 程式設計</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel=stylesheet type="text/css" href="myCss.css" />
	<base target="_blank">
	<script type="text/javascript" src="myJs.js"></script>
	<script type="text/javascript" src="shCore.js"></script>
	<script type="text/javascript" src="shBrushMine.js"></script>
	<link href="shCore.css" rel="stylesheet" type="text/css" />
	<link href="shThemeDefault.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">
		SyntaxHighlighter.all();
	</script>
	</head>

<body bgcolor="#ccccff">

<blockquote>

<p>HTML 5 新增的「video」和「audio」標籤，使瀏覽器可以用原生的能力撥放影音訊號，不需要再透過外掛程式，也不再需要透過各種不同的標籤，指定一大堆奇怪的參數。以下的範例，影片或聲音來源為 <a href="https://www.youtube.com/watch?v=GmV8xXiHu3Q">《自由＿＿》 ｜KKBOX</a> (<a href="pics/freedom.mp4">近端備份</a>)、<a href="pics/drift.mp3">2009 清華資工營營歌 - 漂流</a>，以及 <a href="https://www.youtube.com/watch?v=qQQj_iLW9bI">師大附中74th惡搞畢業歌-古默寧</a>(<a href="pics/good_morning.mp3">近端備份</a>)。</p>

<p>要在網頁中嵌入影片檔非常簡單，範例如下：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;video src=&quot;../pics/freedom.mp4&quot;&gt;&lt;/video&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>各位應該會發現，打開這個範例時只有一片白，而且不論怎麼點按網頁也沒有反應。這是因為影片在預設情況下，會停留在第一個 frame，而此範例影片的第一個 frame 剛好是一片白。</p>

<p>我們可以加上其他的一些屬性，來進行播放的控制：</p>
<ul>
	<li>autoplay: 自動撥放</li>
	<li>loop: 重複播放</li>
	<li>controls: 加上控制面板</li>
</ul>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;video src=&quot;../pics/freedom.mp4&quot; autoplay loop controls&gt;&lt;/video&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>由於影片的第一個 frame 通常沒有什麼意義，所以可以透過「poster」屬性，來為影片貼上封面：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;video src=&quot;../pics/freedom.mp4&quot; controls poster=&quot;../pics/freedom.png&quot;&gt;&lt;/video&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>我們也可以像「img」標籤一樣，透過「width」和「height」屬性來調整寬度和高度。如果只設定其一，則會維持比例；如果兩者都設定且不成比例，則瀏覽器會幫你填充多餘部分的版面，以維持比例：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;video src=&quot;../pics/freedom.mp4&quot; controls	   width=&quot;1234&quot; height=&quot;567&quot; style=&quot;border:1px solid&quot;&gt;&lt;/video&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>「muted」屬性可以設定是否靜音，「preload」屬性可以指定影音檔是否要在播放前預先下載，這個屬性有以下三種值：</p>
<ul>
	<li>auto: 自動預先載入</li>
	<li>metadata: 只預先載入 metadata</li>
	<li>none: 不預先載入</li>
</ul>

<p>範例如下：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;video src=&quot;../pics/freedom.mp4&quot; controls muted preload=&quot;auto&quot;&gt;&lt;/video&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>由於影音格式眾多，仍然不見得每種瀏覽器都支援各式格式，所以可透過「source」，來提供多種不同格式的影片：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;video controls&gt;	&lt;source src=&quot;../pics/freedom.mp4&quot; type=&quot;video/mp4&quot;&gt;	&lt;p&gt;你的瀏覽器不支援 video 標籤&lt;/p&gt;	&lt;p&gt;下載 &lt;a href=&quot;../pics/freedom.mp4&quot;&gt;mp4 格式&lt;/a&gt;的影片檔&lt;/p&gt;&lt;/video&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>「audio」標籤和「video」的屬性大致相同，不過沒有「width」、「height」和「poster」屬性：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;audio src=&quot;../pics/drift.mp3&quot; controls&gt;&lt;/audio&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>「audio」和「video」標籤還有許多屬性和方法，可以讓我們透過 JavaScript 作更靈活的控制。簡單列出部分如下：</p>
<ul>
	<li>currentTime: 目前的播放秒數</li>
	<li>duration: 資料長度(秒)(唯讀屬性)</li>
	<li>ended: 播放是否結束</li>
	<li>paused: 是否暫停中(唯讀屬性)</li>
	<li>playbackRate: 播放速度</li>
	<li>volume: 音量，0 為靜音，1 為最大</li>
	<li>play(): 開始播放</li>
	<li>pause(): 暫停播放</li>
</ul>

<p>透過「addEventListener」來捕捉播放結束的事件(「ended」)，就可以製做一個簡單的播放器。網頁載入時，可以在數首歌曲中，用滑鼠點兩下來選一首開始撥放，之後會一直在數首之間輪流：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;audio id=&quot;myPlayer&quot; src=&quot;&quot; controls&gt;&lt;/audio&gt;&lt;form&gt;	&lt;select id=&quot;songList&quot; size=&quot;3&quot; ondblclick=&quot;playSong()&quot;&gt;		&lt;option&gt;drift.mp3&lt;/option&gt;		&lt;option&gt;freedom.mp3&lt;/option&gt;		&lt;option&gt;good_morning.mp3&lt;/option&gt;	&lt;/select&gt;&lt;/form&gt;&lt;script&gt;	myPlayer = document.getElementById(&quot;myPlayer&quot;);	songList = document.getElementById(&quot;songList&quot;);	songNames = songList.options;		myPlayer.addEventListener('ended', function() {		songNames.selectedIndex = (songNames.selectedIndex + 1) % songNames.length;		this.src = &quot;../pics/&quot; + songNames[songNames.selectedIndex].text;		this.play();	});		function playSong(){		if(songNames.selectedIndex &gt;= 0){			myPlayer.src = &quot;../pics/&quot; + songNames[songNames.selectedIndex].text;			myPlayer.play();		}	}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>我們還可以利用這些屬性和方法，進行一些控制。其中，由於部分瀏覽器在 playbackRate 較小或者為負數時會轉為靜音，故未展示相關功能，有興趣者可自行測試(可能需要轉檔成其他格式)：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;	&lt;style&gt;		pre{font-size: 17px;}		a:hover{background: #ff9}	&lt;/style&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;audio id=&quot;drift&quot; src=&quot;../pics/drift.mp3&quot; controls&gt;&lt;/audio&gt;&lt;br/&gt;&lt;input type=&quot;button&quot; value=&quot;||&quot; onclick=&quot;pause();&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;&gt;&quot; onclick=&quot;play();&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;&gt;&gt;&quot; onclick=&quot;fastPlay();&quot;&gt;&lt;pre&gt;&lt;a onclick=&quot;playBetween(  1.0,  7.8)&quot;&gt;片刻清醒片刻瘋狂　我醒在黑夜的海上&lt;/a&gt;&lt;a onclick=&quot;playBetween(  7.8, 15.0)&quot;&gt;乘著孤寂四處飄蕩　故鄉在遙遠的方向&lt;/a&gt;&lt;a onclick=&quot;playBetween( 15.0, 24.0)&quot;&gt;緩緩登上一座荒島　這將是地獄或天堂&lt;/a&gt;&lt;a onclick=&quot;playBetween( 24.0, 31.0)&quot;&gt;翠綠棕梠輕輕搖晃　帶給我生存的力量&lt;/a&gt;&lt;a onclick=&quot;playBetween( 31.0, 44.2)&quot;&gt;忽然　看見　前方　有光　是誰　在唱&lt;/a&gt;&lt;a onclick=&quot;playBetween( 44.2, 56.0)&quot;&gt;來吧　朋友　不要　沮喪　讓熱情驅逐哀傷&lt;/a&gt;&lt;a onclick=&quot;playBetween( 56.0, 62.9)&quot;&gt;人生的海浪多無常　總是打擊人希望&lt;/a&gt;&lt;a onclick=&quot;playBetween( 62.9, 69.4)&quot;&gt;前進的腳步雖踉蹌　揮揮手逝去淚光&lt;/a&gt;&lt;a onclick=&quot;playBetween( 69.4, 75.9)&quot;&gt;多麼慶幸這一路上　有你陪在我身旁&lt;/a&gt;&lt;a onclick=&quot;playBetween( 75.9, 85.1)&quot;&gt;　　　　總有一天　我們遠渡重洋&lt;/a&gt;&lt;a onclick=&quot;playBetween( 85.1, 93.0)&quot;&gt;緩緩登上一座荒島　這將是地獄或天堂&lt;/a&gt;&lt;a onclick=&quot;playBetween( 93.0,100.0)&quot;&gt;翠綠棕梠輕輕搖晃　帶給我生存的力量&lt;/a&gt;&lt;a onclick=&quot;playBetween(100.0,112.3)&quot;&gt;忽然　看見　前方　有光　是誰　在唱&lt;/a&gt;&lt;a onclick=&quot;playBetween(112.3,125.0)&quot;&gt;來吧　朋友　不要　沮喪　讓熱情驅逐哀傷&lt;/a&gt;&lt;a onclick=&quot;playBetween(125.0,131.5)&quot;&gt;人生的海浪多無常　總是打擊人希望&lt;/a&gt;&lt;a onclick=&quot;playBetween(131.5,137.7)&quot;&gt;前進的腳步雖踉蹌　揮揮手逝去淚光&lt;/a&gt;&lt;a onclick=&quot;playBetween(137.7,144.3)&quot;&gt;多麼慶幸這一路上　有你陪在我身旁&lt;/a&gt;&lt;a onclick=&quot;playBetween(144.3,150.7)&quot;&gt;　　　　總有一天　我們遠渡重洋&lt;/a&gt;&lt;a onclick=&quot;playBetween(150.7,157.4)&quot;&gt;　　　　再次回到　熟悉的故鄉&lt;/a&gt;&lt;/pre&gt;&lt;script&gt;d = document.getElementById(&quot;drift&quot;);timer = null;function pause(){	d.pause();}function play(){	clearTimeout(timer); // 免除 playBetween 設下的暫停影響	d.playbackRate = 1.0;	d.play();}function fastPlay(){	clearTimeout(timer); // 免除 playBetween 設下的暫停影響	d.playbackRate += 1.0;	d.play();}function playBetween(startTime, endTime){	clearTimeout(timer); // 免除前一次 playBetween 設下的暫停影響	d.playbackRate = 1.0;	d.currentTime = startTime;	d.play();	timer = setTimeout(&quot;pause()&quot;, (endTime - startTime) * 1000); // 預約暫停}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>如果要對音訊加上一些效果，甚至進行自訂的編輯，就需要透過 Web Audio API 來達成。他的基本概念是，把輸入、輸出、及各種音訊操作都看成是節點，我們把節點適當的串接起來，就可以達到許多複雜的效果。需要注意的是，目前(2019 年初)這是一個實驗性功能，因此在部分瀏覽器上(如 IE 等)可能仍不適用；而若在範例觀看時碰到問題，則建議換用 Firefox 測試。</p>

<p>我們先以產生正弦波，並且能同時控制頻率與音量做為範例。各位可以順便試試看自己的耳朵，可以聽到多高頻的聲音？</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;頻率：&lt;input type=&quot;range&quot; min=20 max=20000 step=1 value=&quot;440&quot; style=&quot;width:300px&quot; id=&quot;freqCtrl&quot;&gt; &lt;span id=&quot;showFreq&quot;&gt;&lt;/span&gt;&lt;br&gt;音量：&lt;input type=&quot;range&quot; min=0 max=1 step=0.1 value=&quot;0.3&quot; style=&quot;width:300px&quot; id=&quot;volCtrl&quot;&gt; &lt;span id=&quot;showVol&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;input type=&quot;button&quot; value=&quot;Play&quot; id=&quot;ctrl&quot;&gt;&lt;script&gt;AudioContext = window.AudioContext || window.webkitAudioContext;audioCtx = new AudioContext();oscillator = audioCtx.createOscillator();gainNode = audioCtx.createGain();oscillator.type = 'sine';oscillator.frequency.value = document.getElementById('freqCtrl').value;gainNode.gain.value = document.getElementById('volCtrl').value;oscillator.connect(gainNode);document.getElementById('showFreq').innerHTML = document.getElementById('freqCtrl').value;document.getElementById('freqCtrl').onchange = function(){	document.getElementById('showFreq').innerHTML = this.value;	oscillator.frequency.value = this.value;}document.getElementById('showVol').innerHTML = document.getElementById('volCtrl').value;document.getElementById('volCtrl').onchange = function(){	document.getElementById('showVol').innerHTML = this.value;	gainNode.gain.value = this.value;}document.getElementById('ctrl').onclick = function(){	if(this.value == 'Play'){		try {			oscillator.start(); // 必須以事件啟動，而且只能呼叫一次		}		catch {			//		}		gainNode.connect(audioCtx.destination);		this.value = 'Pause';	}	else {		gainNode.disconnect(audioCtx.destination);		this.value = 'Play';	}}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>若將 createOscillator 改成 createMediaElementSource，則可以將 audio 標籤的音訊做為來源，甚至進行一些自訂的處理。需要注意的是，因為瀏覽器對 JavaScript 的安全性限制，若要自行嘗試執行範例，則可能需要架設伺服器，或者上傳到網頁空間(支援靜態網頁即可)。以下範例使用到了 low pass filter, high pass filter 以及自訂處理，來示範簡單的人聲移除：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;audio src=&quot;../pics/good_morning_short.mp3&quot;&gt;&lt;/audio&gt;音量：&lt;input type=&quot;range&quot; min=0 max=1 step=0.1 value=&quot;0.3&quot; style=&quot;width:300px&quot; id=&quot;volCtrl&quot;&gt;&lt;span id=&quot;showVol&quot;&gt;&lt;/span&gt;&lt;br&gt;頻率：&lt;input type=&quot;range&quot; min=100 max=500 step=1 value=&quot;120&quot; style=&quot;width:300px&quot; id=&quot;freqCtrl&quot;&gt;&lt;span id=&quot;showFreq&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input type=&quot;button&quot; value=&quot;Backgorund&quot; id=&quot;ctrlSrc&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;Play&quot; id=&quot;ctrlPlay&quot;&gt;&lt;script&gt;AudioContext = window.AudioContext || window.webkitAudioContext;audioCtx = new AudioContext();audio = document.getElementsByTagName('audio')[0];source = audioCtx.createMediaElementSource(audio);filterLowPass = audioCtx.createBiquadFilter();filterHighPass = audioCtx.createBiquadFilter();mix = audioCtx.createGain();gainNode = audioCtx.createGain();filterLowPass.type = 'lowpass';filterHighPass.type = 'highpass';processor = audioCtx.createScriptProcessor(2048, 2, 1);processor.onaudioprocess = function(evt){	var inputL = evt.inputBuffer.getChannelData(0);	var inputR = evt.inputBuffer.getChannelData(1);	var output = evt.outputBuffer.getChannelData(0);	for(var i = 0; i &lt; inputL.length; i++){		output[i] = inputL[i] - inputR[i];	}}source.connect(filterLowPass);source.connect(filterHighPass);filterLowPass.connect(mix);filterHighPass.connect(processor);processor.connect(mix);mix.connect(gainNode);source.connect(gainNode);gainNode.gain.value = document.getElementById('volCtrl').value;document.getElementById('showVol').innerHTML = document.getElementById('volCtrl').value;document.getElementById('volCtrl').onchange = function(){	document.getElementById('showVol').innerHTML = this.value;	gainNode.gain.value = this.value;}filterLowPass.frequency.value = document.getElementById('freqCtrl').value;filterHighPass.frequency.value = document.getElementById('freqCtrl').value;document.getElementById('showFreq').innerHTML = document.getElementById('freqCtrl').value;document.getElementById('freqCtrl').onchange = function(){	document.getElementById('showFreq').innerHTML = this.value;	filterLowPass.frequency.value = this.value;	filterHighPass.frequency.value = this.value;}document.getElementById('ctrlSrc').onclick = function(){	if(this.value == 'Backgorund'){		mix.connect(gainNode);		source.disconnect(gainNode);		this.value = 'Original';	}	else {		mix.disconnect(gainNode);		source.connect(gainNode);		this.value = 'Backgorund';	}}document.getElementById('ctrlPlay').onclick = function(){	if(this.value == 'Play'){		audio.play();		gainNode.connect(audioCtx.destination);		this.value = 'Pause';	}	else {		audio.pause();		gainNode.disconnect(audioCtx.destination);		this.value = 'Play';	}}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>上述範例中的節點連接方式如下：</p>
<center><img src="pics/webaudio_tag_struct.png"></center>
<br>

<p>也可以跟 canvas 做結合。此範例主要是把波形圖繪製在 canvas 上，並在 canvas 加上一些事件互動：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;	&lt;style&gt;		a:hover{background-color: #ff9}	&lt;/style&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;1000&quot; height=&quot;200&quot; style=&quot;border:1px solid;position:absolute;top:30px;left:50px;&quot;&gt;&lt;/canvas&gt;&lt;table style=&quot;border:1px solid;position:absolute;top:250px;left:50px;padding:5px&quot;&gt;	&lt;tr&gt;		&lt;td&gt;			&lt;p&gt;				&lt;audio id=&quot;myAudio&quot; src=&quot;&quot; controls&gt;&lt;/audio&gt;			&lt;/p&gt;			&lt;p&gt;				檢視比例:&amp;nbsp;&amp;nbsp;(-) &lt;input type=&quot;range&quot; value=&quot;1000&quot; min=&quot;500&quot; max=&quot;4000&quot; step=&quot;50&quot; onchange=&quot;redrawWave(this.value)&quot;&gt; (+)			&lt;/p&gt;			&lt;p&gt;				&lt;input type=&quot;button&quot; value=&quot;播放選取區間&quot; onclick=&quot;playSelectedRegion()&quot;&gt;			&lt;/p&gt;			&lt;p&gt;				&lt;input type=&quot;button&quot; value=&quot;顯示選取區間(秒)&quot; onclick=&quot;showSelectedRegionInfo()&quot;&gt;				&lt;span id=&quot;showTime&quot;&gt;&lt;/span&gt;			&lt;/p&gt;			&lt;p&gt;				&lt;input type=&quot;button&quot; value=&quot;指定選取區間(秒)&quot; onclick=&quot;assignRegion()&quot;&gt;:				&lt;input id=&quot;assignSelectMin&quot; type=&quot;number&quot; min=0 max=1 step=0.01&gt; ~				&lt;input id=&quot;assignSelectMax&quot; type=&quot;number&quot; min=0 max=1 step=0.01&gt;			&lt;/p&gt;		&lt;/td&gt;		&lt;td&gt;			&lt;span id=&quot;showLyrics&quot;&gt;&lt;/span&gt;		&lt;/td&gt;	&lt;/tr&gt;&lt;/table&gt;&lt;script&gt;// Ref: https://stackoverflow.com/questions/22073716/create-a-waveform-of-the-full-track-with-web-audio-api// Audio variablesAudioContext = window.AudioContext || window.webkitAudioContext;audioCtx = new AudioContext();currentBuffer  = null;myAudio = document.getElementById(&quot;myAudio&quot;);downSampleRate = 400;// Canvas variablescanvas = document.getElementById(&quot;myCanvas&quot;);canvasCtx = canvas.getContext(&quot;2d&quot;);// Update-needed variablescanvasWidth = document.getElementById(&quot;myCanvas&quot;).width;canvasHeight = document.getElementById(&quot;myCanvas&quot;).height;regionBegin = regionEnd = regionDragging = false;timer = null;boundaryNearBy = null;function loadMusic(url){	var req = new XMLHttpRequest();	req.open(&quot;GET&quot;, url, true);	req.responseType = &quot;arraybuffer&quot;;		req.onreadystatechange = function(e){		if(req.readyState == 4){			if(req.status == 200){				audioCtx.decodeAudioData(req.response, function(buffer){					currentBuffer = buffer;					displayBuffer(buffer.getChannelData(0)); // Draw left channel only					myAudio.src = url;					document.getElementById(&quot;assignSelectMin&quot;).max = currentBuffer.duration;					document.getElementById(&quot;assignSelectMax&quot;).max = currentBuffer.duration;				}, function (){					alert('Error while decoding your file.');				});			}			else {				alert('Error during the load. Wrong url or cross origin issue.');			}		}	};	req.send();}function canvasXToSec(x){	return x / canvasWidth * currentBuffer.duration;}function secToCanvasX(sec){	return sec / currentBuffer.duration * canvasWidth;}function sampleIdxToCanvasX(sampleIdx, sigLen){	return Math.floor( canvasWidth * sampleIdx / sigLen);}function drawVertoclaLineAtX(x){	canvasCtx.lineWidth = 1;	canvasCtx.beginPath();	canvasCtx.strokeStyle = &quot;#000&quot;;	canvasCtx.moveTo(x, 0);	canvasCtx.lineTo(x, canvasHeight);	canvasCtx.stroke();}function drawRectAtXRange(x1, x2){	canvasCtx.fillStyle = &quot;rgba(255,204,255,0.3)&quot;;	canvasCtx.fillRect(Math.min(x1, x2), 0, Math.abs(x1-x2), canvasHeight);}function drawSelectedRegion(x1, x2){	drawRectAtXRange(x1, x2);	drawVertoclaLineAtX(x1);	drawVertoclaLineAtX(x2);}function displayBuffer(sig){	canvasWidth = document.getElementById(&quot;myCanvas&quot;).width;	canvasHeight = document.getElementById(&quot;myCanvas&quot;).height;	canvasCtx.fillStyle = '#fff';	canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);	canvasCtx.strokeStyle = '#000';	canvasCtx.lineWidth = 1;	for (var i=0; i&lt;sig.length; i+=downSampleRate) {		var x = sampleIdxToCanvasX(i, sig.length);		var y = sig[i] * canvasHeight / 2 + canvasHeight / 2;		canvasCtx.beginPath();		canvasCtx.moveTo(x, canvasHeight / 2);		canvasCtx.lineTo(x, y);		canvasCtx.stroke();	}}function redrawWave(width){	if(currentBuffer == null){		return false	}	// Save selected region (unit: sec)	s1 = canvasXToSec(regionBegin);	s2 = canvasXToSec(regionEnd);	// Update canvas width and wavform	document.getElementById(&quot;myCanvas&quot;).width = width;	displayBuffer(currentBuffer.getChannelData(0));	// Draw new selected region	regionBegin = secToCanvasX(s1);	regionEnd = secToCanvasX(s2);	drawSelectedRegion(regionBegin, regionEnd);}canvas.onmousedown = function(ev){	if(canvas.style.cursor == 'col-resize'){ // Adjust old region		mx = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;		if(boundaryNearBy == 'begin'){			regionBegin = regionEnd;		}		console.log(&quot;Begin adjusting region:&quot;, regionBegin, mx);	}	else { // A new region		regionBegin = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;		console.log(&quot;Begin new region:&quot;, regionBegin, canvasXToSec(regionBegin));	}	regionDragging = true;}canvas.onmousemove = function(){	mx = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;	if(regionDragging){		displayBuffer(currentBuffer.getChannelData(0));		drawSelectedRegion(regionBegin, mx);	}	else {		if(Math.abs(mx-regionBegin) &lt;= 1 || Math.abs(mx-regionEnd) &lt;= 1){			canvas.style.cursor = 'col-resize';			if(Math.abs(mx-regionBegin) &lt;= 1){				boundaryNearBy = 'begin';			}		}		else if(Math.abs(mx-regionBegin) &gt; 3 &amp;&amp; Math.abs(mx-regionEnd) &gt; 3) {			canvas.style.cursor = 'default';			boundaryNearBy = null;		}	}}canvas.onmouseup = function(ev){	regionEnd = event.clientX - parseInt(canvas.style.left) + window.pageXOffset;	console.log(&quot;End:&quot;, regionEnd, canvasXToSec(regionEnd));	console.log(&quot;---------------&quot;);	regionDragging = false;	canvas.style.cursor = 'default';}function playSelectedRegion(){	t1 = Math.min(canvasXToSec(regionBegin), canvasXToSec(regionEnd));	t2 = Math.max(canvasXToSec(regionBegin), canvasXToSec(regionEnd));	playBetween(t1, t2);}function showSelectedRegionInfo(){	t1 = Math.min(canvasXToSec(regionBegin), canvasXToSec(regionEnd));	t2 = Math.max(canvasXToSec(regionBegin), canvasXToSec(regionEnd));	document.getElementById(&quot;showTime&quot;).innerHTML = t1 + ', ' + t2;}function assignRegion(){	t1 = Math.min(document.getElementById(&quot;assignSelectMin&quot;).value, document.getElementById(&quot;assignSelectMax&quot;).value);	t2 = Math.max(document.getElementById(&quot;assignSelectMin&quot;).value, document.getElementById(&quot;assignSelectMax&quot;).value);	regionBegin = secToCanvasX(t1);	regionEnd   = secToCanvasX(t2);	displayBuffer(currentBuffer.getChannelData(0));	drawSelectedRegion(regionBegin, regionEnd);}function playBetween(startTime, endTime){	clearTimeout(timer); // 免除前一次 playBetween 設下的暫停影響	myAudio.playbackRate = 1.0;	myAudio.currentTime = startTime;	myAudio.play();	timer = setTimeout(&quot;myAudio.pause()&quot;, (endTime - startTime) * 1000); // 預約暫停}loadMusic('../pics/drift.mp3');lyrics = [[  1.0,  7.8, '片刻清醒片刻瘋狂　我醒在黑夜的海上'],[  7.8, 15.0, '乘著孤寂四處飄蕩　故鄉在遙遠的方向'],[ 15.0, 24.0, '緩緩登上一座荒島　這將是地獄或天堂'],[ 24.0, 31.0, '翠綠棕梠輕輕搖晃　帶給我生存的力量'],[ 31.0, 44.2, '忽然　看見　前方　有光　是誰　在唱'],[ 44.2, 56.0, '來吧　朋友　不要　沮喪　讓熱情驅逐哀傷'],[ 56.0, 62.9, '人生的海浪多無常　總是打擊人希望'],[ 62.9, 69.4, '前進的腳步雖踉蹌　揮揮手逝去淚光'],[ 69.4, 75.9, '多麼慶幸這一路上　有你陪在我身旁'],[ 75.9, 85.1, '總有一天　我們遠渡重洋'],[ 85.1, 93.0, '緩緩登上一座荒島　這將是地獄或天堂'],[ 93.0,100.0, '翠綠棕梠輕輕搖晃　帶給我生存的力量'],[100.0,112.3, '忽然　看見　前方　有光　是誰　在唱'],[112.3,125.0, '來吧　朋友　不要　沮喪　讓熱情驅逐哀傷'],[125.0,131.5, '人生的海浪多無常　總是打擊人希望'],[131.5,137.7, '前進的腳步雖踉蹌　揮揮手逝去淚光'],[137.7,144.3, '多麼慶幸這一路上　有你陪在我身旁'],[144.3,150.7, '總有一天　我們遠渡重洋'],[150.7,157.4, '再次回到　熟悉的故鄉']];for(i=0;i&lt;lyrics.length;i++){	document.getElementById(&quot;showLyrics&quot;).innerHTML += `&lt;a onclick=&quot;playBetween(  ${lyrics[i][0]},  ${lyrics[i][1]})&quot;&gt;${lyrics[i][2]}&lt;/a&gt;&lt;br/&gt;`;}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
<p>也可以從麥克風取得音訊。此範例把從麥克風取得的音訊重新播出，並且透過 analyser 計算出頻譜並繪製出來：</p>
<pre class="brush: htmljs">﻿&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;	&lt;style&gt;		a:hover{background-color: #ff9}	&lt;/style&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;canvas id=&quot;myCanvas&quot; width=&quot;1024&quot; height=&quot;200&quot; style=&quot;border:1px solid;position:absolute;top:30px;left:10px;background-color:#fff&quot;&gt;&lt;/canvas&gt;&lt;div style=&quot;position:absolute;top:250px&quot;&gt;&lt;input type=&quot;button&quot; value=&quot;Off&quot; id=&quot;micSwitch&quot;&gt;&lt;/div&gt;&lt;script&gt;canvas = document.getElementById(&quot;myCanvas&quot;);canvasCtx = canvas.getContext(&quot;2d&quot;);source = null;analyser = null;navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(	getMic).catch(	function(e){		console.log(e);	})function getMic(stream){	AudioContext = window.AudioContext || window.webkitAudioContext;	audioCtx = new AudioContext();	source = audioCtx.createMediaStreamSource(stream);	analyser = audioCtx.createAnalyser();	analyser.fftSize = 2048;	source.connect(audioCtx.destination);	source.connect(analyser);	draw();}function draw(){	if(analyser==null){		return;	}	var dataArray = new Uint8Array(analyser.frequencyBinCount);	analyser.getByteFrequencyData(dataArray);	canvasWidth = document.getElementById(&quot;myCanvas&quot;).width;	canvasHeight = document.getElementById(&quot;myCanvas&quot;).height;	canvasCtx.fillStyle = '#fff';	canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);	canvasCtx.strokeStyle = '#000';	canvasCtx.lineWidth = 1;	canvasCtx.beginPath();	for(var i = 0; i &lt; analyser.frequencyBinCount; i++){		var v = dataArray[i] / 256.0;		var x = i / analyser.frequencyBinCount * canvasWidth;		var y = canvasHeight - (v * canvasHeight);		if(i == 0){			canvasCtx.moveTo(x, y);		}		else {			canvasCtx.lineTo(x, y);		}	}	canvasCtx.stroke();	requestAnimationFrame(draw);}document.getElementById('micSwitch').onclick = function(){	if(this.value == 'Off'){		if(source){			source.disconnect(audioCtx.destination);		}		this.value = 'On';	}	else {		if(source){			source.connect(audioCtx.destination);		}		this.value = 'Off';	}}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>
<br>
</blockquote>

</body>
</html>
