<html>
<head>
	<title>線上教材：WEB 程式設計</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel=stylesheet type="text/css" href="myCss.css" />
	<base target="_blank">
	<script type="text/javascript" src="myJs.js"></script>
	<script type="text/javascript" src="shCore.js"></script>
	<script type="text/javascript" src="shBrushXml.js"></script>
	<script type="text/javascript" src="shBrushCss.js"></script>
	<script type="text/javascript" src="shBrushMine.js"></script>
	<link href="shCore.css" rel="stylesheet" type="text/css" />
	<link href="shThemeDefault.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">
		SyntaxHighlighter.all();
	</script>
	</head>

<body bgcolor="#ccccff">

<blockquote>

<script>
Gol_D_Roger("5", "4-4"); // 顯示羅傑的書的章節對應
</script>

<p>本篇主要介紹 JavaScript 當中，關於函式和物件的一些特性。在 C 語言中，函式內若要使用全域變數，則可直接使用，但若在函式內宣告了一個同樣名稱的變數，則函式內只會看到區域變數。此點在 JavaScript 也相同：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;	&lt;script&gt;		function test(){			var x = 30;			y = 40;		}	&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;var x = 10;var y = 20;document.write(&quot;before test, x: &quot; + x + &quot;, y: &quot; + y + &quot;&lt;br/&gt;&lt;br/&gt;&quot;);test();document.write(&quot;after test, x: &quot; + x + &quot;, y: &quot; + y + &quot;&lt;br/&gt;&lt;br/&gt;&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>Function 內的變數，宣告時如果沒有加「var」，則會是全域變數。下面這段程式碼，如果是已經宣告過「int i;」的 C 語言，你覺得會如何輸出？可以先想想看再點網頁來看看 JavaScript 的結果：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function func02(){	for(i=1;i&lt;=5;i++){		document.write(&quot;&amp;nbsp;&amp;nbsp;func02 &quot; + i + &quot;&lt;br&gt;&quot;);	}}function func01(){	for(i=1;i&lt;=3;i++){		document.write(&quot;func01 &quot; + i + &quot;&lt;br&gt;&quot;);		func02();	}}func01();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>上面的範例，如果加上「var」來宣告，就會跟各位以前的經驗相同了：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function func02(){	for(var i=1;i&lt;=5;i++){		document.write(&quot;&amp;nbsp;&amp;nbsp;func02 &quot; + i + &quot;&lt;br&gt;&quot;);	}}function func01(){	for(var i=1;i&lt;=3;i++){		document.write(&quot;func01 &quot; + i + &quot;&lt;br&gt;&quot;);		func02();	}}func01();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>在 function 當中，利用 var 宣告的變數，不管擺在哪裡，都對整個 function 有效：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;var x = 0;function func01(){	console.log(&quot;func01, x: &quot; + x); // 函式內沒有區域變數，故取得全域變數	x = 2;	console.log(&quot;func01, x: &quot; + x);}function func02(){	var x;	console.log(&quot;func02, x: &quot; + x); // 已宣告區域變數 x，但尚未定義，所以應該是 undefined	x = 2;	console.log(&quot;func02, x: &quot; + x);}function func03(){ // 跟 funct02 同意	console.log(&quot;func03, x: &quot; + x); // 已宣告區域變數 x，但尚未定義，所以應該是 undefined	var x = 2;	console.log(&quot;func03, x: &quot; + x);}&lt;/script&gt;&lt;input type=&quot;button&quot; onClick=&quot;func01();&quot; value=&quot;執行 func01&quot;&gt;&lt;input type=&quot;button&quot; onClick=&quot;func02();&quot; value=&quot;執行 func02&quot;&gt;&lt;input type=&quot;button&quot; onClick=&quot;func03();&quot; value=&quot;執行 func03&quot;&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>C 語言的 printf 等函式，可以接受不同的輸入參數個數。其中，第一個參數必須給定，然後從第一個參數中的內容，決定接下來有幾個參數。於 JavaScript 中的做法也很類似，不過我們連第一個參數都可以不必給，而可透過「arguments.length」和「arguments[i]」，分別取得參數個數以及第 i 個參數的內容。本範例做的是簡單的加法示範，當然你可以用來做較為複雜的輸出：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function myAdd(){	sum = 0;	for(i=0;i&lt;arguments.length;i++){		sum = sum + arguments[i];	}	return sum;}document.write(&quot;1+2+3 = &quot; + myAdd( 1, 2, 3 ) + &quot;&lt;br/&gt;&lt;br/&gt;&quot;);document.write(&quot;1+2+3+4+5 = &quot; + myAdd( 1, 2, 3, 4, 5 ) + &quot;&lt;br/&gt;&lt;br/&gt;&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>JavaScript 可以讓你定義自己的物件：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function area(){	return this.width * this.height;}function myPrint(){	document.write(&quot;長: &quot; + this.width + &quot;，&quot;);	document.write(&quot;寬: &quot; + this.height + &quot;，&quot;);	document.write(&quot;面積: &quot; + this.area() + &quot;。&quot;);}// 定義物件rectangle = new Object();rectangle.width = 123;rectangle.height = 456;rectangle.area = area;rectangle.print = myPrint;rectangle.print();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>如果物件的個數較多，也可以使用「建構子」的方式：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function circle(radius){	this.radius = radius;	this.computeArea = function(){		return this.radius * this.radius * Math.PI;	}	this.print = function(){		document.write(&quot;面積：&quot; + this.computeArea() + &quot;&lt;br/&gt;&quot;);	}}cir1 = new circle(1);cir2 = new circle(2);cir3 = new circle(3);cir1.print();cir2.print();cir3.print();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>當然，也可以把自訂物件放到陣列當中來處理：</p>
<pre class="brush: htmljs">﻿&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#ccccff&quot;&gt;&lt;script&gt;function circle(radius){	this.radius = radius;	this.computeArea = function(){		return this.radius * this.radius * Math.PI;	}	this.print = function(){		document.write(&quot;面積：&quot; + this.computeArea() + &quot;&lt;br/&gt;&quot;);	}}circles = new Array();for(i=1;i&lt;=5;i++){	circles[i] = new circle(i);}for(i=1;i&lt;=5;i++){	circles[i].print();}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre>

<p>上述範例中順便展示了另外一件事實：如果要自動增大陣列，不一定要從 0 開始。但此時你若利用「typeof」把陣列 0 的型別顯示出來，則會是「undefined」。</p>

</blockquote>

</body></html>
