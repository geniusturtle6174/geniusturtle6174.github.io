<html>
<head>
	<title>線上教材：WEB 程式設計</title>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link rel=stylesheet type="text/css" href="myCss.css" />
	<base target="_blank">
	<script type="text/javascript" src="myJs.js"></script>
	<script type="text/javascript" src="shCore.js"></script>
	<script type="text/javascript" src="shBrushSql.js"></script>
	<script type="text/javascript" src="shBrushMine.js"></script>
	<link href="shCore.css" rel="stylesheet" type="text/css" />
	<link href="shThemeDefault.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">
		SyntaxHighlighter.all();
	</script>
	</head>

<body bgcolor="#ccccff">

<blockquote>

<p>於本篇中，將要介紹一些基本的 SQL 指令(若有興趣學習更進階的概念與用法，可以修習資料庫相關課程)。用於示範的資料表共有三張，可以從<a href="examples/singer_song_songrank.sql">這裡</a>下載，也可以依據以下的欄位說明自行新增：</p>

<p>songrank 資料表(實務上可能會將歌曲名稱與演唱者改以各自的 id 數字作為欄位資料，此處為便於範例閱讀，故採用文字)：</p>
<table class="slide" align=center>
	<tr>
		<th class="slide">id (資料序號)</th>
		<th class="slide">this_rank (當日排名)</th>
		<th class="slide">prev_rank (前日排名)</th>
		<th class="slide">song_name (歌曲名稱)</th>
		<th class="slide">singer_name (演 唱 者)</th>
	</tr>
	<tr><!--平-->
		<td class="slide">1</td>
		<td class="slide">1</td>
		<td class="slide">1</td>
		<td class="slide">修煉愛情</td>
		<td class="slide">林俊傑</td>
	</tr>
	<tr><!--進-->
		<td class="slide">2</td>
		<td class="slide">11</td>
		<td class="slide">12</td>
		<td class="slide">存在的力量</td>
		<td class="slide">朱俐靜</td>
	</tr>
	<tr><!--平-->
		<td class="slide">3</td>
		<td class="slide">17</td>
		<td class="slide">17</td>
		<td class="slide">Marry me</td>
		<td class="slide">蕭敬騰</td>
	</tr>
	<tr><!--退-->
		<td class="slide">4</td>
		<td class="slide">46</td>
		<td class="slide">42</td>
		<td class="slide">好難得</td>
		<td class="slide">丁噹</td>
	</tr>
	<tr><!--退，歌手重複-->
		<td class="slide">5</td>
		<td class="slide">60</td>
		<td class="slide">57</td>
		<td class="slide">我會在你身邊</td>
		<td class="slide">朱俐靜</td>
	</tr>
	<tr><!--進，歌手重複-->
		<td class="slide">6</td>
		<td class="slide">63</td>
		<td class="slide">64</td>
		<td class="slide">飛機</td>
		<td class="slide">林俊傑</td>
	</tr>
	<tr><!--進，歌手重複-->
		<td class="slide">7</td>
		<td class="slide">98</td>
		<td class="slide">99</td>
		<td class="slide">只能想念你</td>
		<td class="slide">蕭敬騰</td>
	</tr>
</table>

<p>singer 資料表：</p>
<table class="slide" align=center>
	<tr>
		<th class="slide">id (歌手序號)</th>
		<th class="slide">name (歌手名稱)</th>
		<th class="slide">type (歌手類別)</th>
	</tr>
	<tr><td class="slide">1</td><td class="slide">梁靜茹</td><td class="slide">女歌手</td></tr>
	<tr><td class="slide">2</td><td class="slide">伍佰</td><td class="slide">男歌手</td></tr>
	<tr><td class="slide">3</td><td class="slide">五月天</td><td class="slide">團體</td></tr>
	<tr><td class="slide">4</td><td class="slide">初音未來</td><td class="slide">軟體</td></tr>
	<tr><td class="slide">5</td><td class="slide">鏡音鈴</td><td class="slide">軟體</td></tr>
</table>

<p>song 資料表：</p>
<table class="slide" align=center>
	<tr>
		<th class="slide">id (歌曲序號)</th>
		<th class="slide">name (歌曲名稱)</th>
		<th class="slide">singer_id (歌手序號)</th>
		<th class="slide">language (歌曲語言)</th>
		<th class="slide">youtube (水管連結)</th>
	</tr>
	<tr>
		<td class="slide">1</td>
		<td class="slide">會呼吸的痛</td>
		<td class="slide">1</td>
		<td class="slide">華語</td>
		<td class="slide"><a href="https://www.youtube.com/watch?v=-dry2N6RYM4">https://www.youtube.com/watch?v=-dry2N6RYM4</a></td>
	</tr>
	<tr>
		<td class="slide">2</td>
		<td class="slide">乾杯</td>
		<td class="slide">3</td>
		<td class="slide">華語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=qX2GsMj7154">http://www.youtube.com/watch?v=qX2GsMj7154</a></td>
	</tr>
	<tr>
		<td class="slide">3</td>
		<td class="slide">溫柔</td>
		<td class="slide">3</td>
		<td class="slide">華語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=nWb_X3ZJQjw">http://www.youtube.com/watch?v=nWb_X3ZJQjw</a></td>
	</tr>
	<tr>
		<td class="slide">4</td>
		<td class="slide">OK啦</td>
		<td class="slide">3</td>
		<td class="slide">台語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=_FV1NDdHHEo">http://www.youtube.com/watch?v=_FV1NDdHHEo</a></td>
	</tr>
	<tr>
		<td class="slide">5</td>
		<td class="slide">愛情限時批</td>
		<td class="slide">2</td>
		<td class="slide">台語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=b5Qrin1tRDk">http://www.youtube.com/watch?v=b5Qrin1tRDk</a></td>
	</tr>
	<tr>
		<td class="slide">6</td>
		<td class="slide">夢醒時分</td>
		<td class="slide">2</td>
		<td class="slide">華語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=m9Y5z5sYm3s">http://www.youtube.com/watch?v=m9Y5z5sYm3s</a></td>
	</tr>
	<tr>
		<td class="slide">7</td>
		<td class="slide">夢醒時分</td>
		<td class="slide">1</td>
		<td class="slide">華語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=JbvnzMZnEfc">http://www.youtube.com/watch?v=JbvnzMZnEfc</a></td>
	</tr>
	<tr>
		<td class="slide">8</td>
		<td class="slide">甩蔥歌</td>
		<td class="slide">4</td>
		<td class="slide">日語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=QwZ_VKBTjWo">http://www.youtube.com/watch?v=QwZ_VKBTjWo</a></td>
	</tr>
	<tr>
		<td class="slide">9</td>
		<td class="slide">千本櫻</td>
		<td class="slide">4</td>
		<td class="slide">日語</td>
		<td class="slide"><a href="http://www.youtube.com/watch?v=UcwcedDh8vc">http://www.youtube.com/watch?v=UcwcedDh8vc</a></td>
	</tr>
</table>

<p>由於尚未介紹到 PHP 與 MySQL 的連接，所以我們先透過 phpMyAdmin 來執行 SQL 指令。下載資料表並載入後，點選「SQL」即可開始測試以下的指令效果。</p>

<p>我們先介紹最基本的 SQL 指令: SELECT。它的基本語法如下，其中的欄位名稱若有多個時，可以用逗點分隔，若需要選出全部欄位，則可使用「*」符號：</p>
<pre class="brush: sql">SELECT 欄位名稱 from 表格名稱</pre><br>

<p>例如，想要從從 songrank 資料表當中，選出 this_rank 和 song_name 這兩個欄位的資料時，用法如下：</p>
<pre class="brush: sql">SELECT this_rank, song_name from songrank</pre><br>

<p>若只要選出五筆，可使用「limit」語法。需要注意的是，輸出結果的順序原則上只保證數量，不保證是哪幾筆：</p>
<pre class="brush: sql">SELECT * FROM songrank limit 5</pre><br>

<p>如果想要知道有哪些不一樣的資料，但是次數不重要時，可以使用「DISTINCT」。例如，以下的 SQL 語句，可以選出有哪些不同的歌曲語言：</p>
<pre class="brush: sql">SELECT DISTINCT(language) FROM song</pre><br>

<p>選擇資料時，可以依據需求加上條件，當然還可以利用「AND」和「OR」來綜合許多條件：</p>
<pre class="brush: sql">SELECT * FROM songrank WHERE singer_name = '林俊傑'</pre><br>

<p>加上條件時，也可以在不同欄位之間做比較，例如選出排名進步的歌手資料的方法如下：</p>
<pre class="brush: sql">SELECT * FROM songrank WHERE this_rank &lt; prev_rank</pre><br>

<p>「IN」和「BETWEEN」可以簡化條件式的寫法。以下範例的第一二行效果相同，第三四行效果也相同：</p>
<pre class="brush: sql">SELECT * FROM songrank WHERE this_rank &gt;= 11 AND this_rank &lt;= 46
SELECT * FROM songrank WHERE this_rank BETWEEN 11 AND 46
SELECT * FROM songrank WHERE singer_name = '林俊傑' OR  singer_name = '丁噹'
SELECT * FROM songrank WHERE singer_name IN ('林俊傑','丁噹')</pre><br>

<p>「LIKE」也可以用於描述條件，這個指令常常跟萬用字元一起搭配。SQL 語句當中包含兩個萬用字元：</p>
<ul>
	<li>%: 百分比，代表任意數目的字元</li>
	<li>_: 底線，代表任意一個字元</li>
</ul>

<p>例如，要選出所有藝名是三個字的歌手資料，可以用三個底線：</p>
<pre class="brush: sql">SELECT * FROM songrank WHERE singer_name LIKE '___'
</pre><br>

<p>如果希望選出的資料依照某種規則排序，則可使用「ORDER BY」。排序的順序，預設是遞增排序「ASC」，你也可以使用「DESC」來進行遞減排序：</p>
<pre class="brush: sql">SELECT * FROM songrank ORDER BY singer_name
SELECT * FROM songrank ORDER BY singer_name ASC
SELECT * FROM songrank ORDER BY singer_name DESC</pre><br>

<p>其中請留意，如果「ORDER BY」和「WHERE」同時出現時，「WHERE」必須放在前面。下面範例的第一行是正確的用法，而第二行的指令會產生語法錯誤：</p>
<pre class="brush: sql">SELECT * FROM songrank WHERE this_rank &lt; 50 ORDER BY singer_name
SELECT * FROM songrank ORDER BY singer_name WHERE this_rank &lt; 50</pre><br>

<p>如果你的資料是數字，則可以透過 SQL 當中的一些函式進行簡單的運算(雖然這些運算在本範例中，剛好不太有意義)。另外，透過「AS」，可以幫表格或選出來的欄位取一個比較好懂的名稱(請留意欄位名稱的變化)：</p>
<pre class="brush: sql">SELECT AVG(this_rank) AS '平均', MAX(this_rank) AS '最大值', MIN(this_rank), SUM(this_rank), COUNT(this_rank) FROM songrank</pre><br>

<p>「COUNT」加上「WHERE」條件，就可以計算符合特定條件的資料數量，例如想要計算日語歌曲的總數時，可以使用如下：</p>
<pre class="brush: sql">SELECT COUNT(language) FROM song WHERE language = '日語'</pre><br>

<p>如果要列出不同資料的數量，則需要先用「GROUP BY」把他們聚集在一起，再來計算數量，例如歌曲包含哪幾種語言與其歌曲數目：</p>
<pre class="brush: sql">SELECT language, COUNT(language) FROM song GROUP BY language</pre><br>

<p>又或者選出每位歌手的入榜次數：</p>
<pre class="brush: sql">SELECT singer_name, count(singer_name) FROM songrank GROUP BY singer_name</pre><br>

<p>我們可以在 SQL 指令中放入另一個 SQL 指令，此種作法稱為子查詢。例如歌曲包含幾種語言：</p>
<pre class="brush: sql">SELECT COUNT(*) FROM (SELECT DISTINCT(language) FROM song) AS dstn_lang</pre><br>

<p>當然，若以上面的範例來說，你也可以直接寫成如下：</p>
<pre class="brush: sql">SELECT COUNT(DISTINCT language) FROM song</pre><br>

<p>如果子查詢的欄位只有一個，則也可以作為 where 的條件，例如以下範例可選出唱過日語歌的歌手名稱及類型：</p>
<pre class="brush: sql">SELECT name, type from singer WHERE id in (SELECT singer_id from song WHERE language = '日語')</pre><br>

<p>「UNION」可以將兩個 SQL 指令的結果合併起來，唯一的限制是欄位的資料種類要相同：</p>
<pre class="brush: sql">SELECT id, singer_name FROM songrank
UNION
SELECT singer_id, youtube FROM song</pre><br>

<p>但是「UNION」會剔除重複資料，而「UNION ALL」則否。若要測試，可以觀察以下兩組指令的差異：</p>
<pre class="brush: sql">SELECT * FROM songrank UNION SELECT * FROM songrank
SELECT * FROM songrank UNION ALL SELECT * FROM songrank</pre><br>

<p>如果要新增一筆或數筆資料，則可使用「INSERT」：</p>
<pre class="brush: sql">INSERT INTO songrank (this_rank, singer_name) VALUES (123, '這是測試'), (456, '也是測試')</pre><br>

<p>若需要更新資料，可以使用「UPDATE」：</p>
<pre class="brush: sql">UPDATE songrank SET this_rank = '789', song_name = '不知道' WHERE id = 9</pre><br>

<p>若需要刪除資料，可以使用「DELETE」：</p>
<pre class="brush: sql">DELETE FROM songrank WHERE this_rank &gt; 100</pre><br>

<p>更新或刪除資料時請記得指定正確的條件，否則會不小心把整個資料庫改掉一大半或全部！</p>

<p>我們繼續回到 SELECT 指令的其他範例。接下來的部份範例需要用到兩張資料表，我們會利用「JOIN」來連接兩張資料表(也可以連接多張，但本篇未展示)。其基本用法是「SELECT 欄位名 from 表格_A ... JOIN 表格_B on 條件 ...」，若條件未指定，則所有組合都會被列出。而根據要取的是 A, B 兩張表格的不同資料集合，還會有「LEFT JOIN」、「INNER JOIN」等變化。</p>

<p>例如，若需要選出伍佰唱過的台語歌，則會需要顯示 song 資料表的 name 欄位，並用其 singer_id 欄位跟 singer 資料表做對照：</p>
<pre class="brush: sql">
SELECT song.name FROM song
INNER JOIN singer on singer.id = song.singer_id
WHERE song.language = '台語'
AND singer.name = '伍佰'</pre><br>

<p>又如唱過華語歌的歌手及其歌曲：</p>
<pre class="brush: sql">
SELECT singer.name, song.name FROM singer
INNER JOIN song on singer.id = song.singer_id
WHERE language = '華語'</pre><br>

<p>你可能注意到了上面兩個範例的表格順序不太一樣。事實上，由於 INNER JOIN 取的是交集，所以<strike>表格序順不影執響行</strike>順序並不會影響結果；而且除非你操作的資料非常大量，使用到了較特殊的分散式資料庫，也不會影響效能。</p>

<p>我們繼續看其他範例，例如每個歌手唱過的歌曲數，需要對照 singer 和 song 這兩張資料表，並且計算 singer.name 的數量：</p>
<pre class="brush: sql">
SELECT singer.name, COUNT(singer.name) FROM singer
INNER JOIN song on singer.id = song.singer_id
GROUP BY singer.name</pre><br>

<p>而若是需要選出每個歌手唱過各種語言的歌曲數，則需要把 song.language 也加入 GROUP BY 的項目中，才能把不同語言區分開來：</p>
<pre class="brush: sql">
SELECT singer.name, song.language, COUNT(singer.name) FROM singer
INNER JOIN song on singer.id = song.singer_id
GROUP BY singer.name, song.language</pre><br>

<p>你可能會發現，在前面兩個範例中，歌曲數目為 0 的鏡音並未被列出，這是因為兩張表格的 singer_id 取的是交集。若要將鏡音也列在查詢結果當中，則可使用「LEFT JOIN」，代表取左邊表格的所有資料。這時候，表格的順序就會很重要。</p>
<pre class="brush: sql">
SELECT singer.name, song.language, COUNT(singer.name) FROM singer
LEFT JOIN song ON singer.id = song.singer_id
GROUP BY singer.name, song.language</pre><br>

<p>比較新版的資料庫軟體，可能會支援「WITH...AS」語法，它的概念相當於子查詢，但是當整體 SQL 語句比較複雜時，使用「WITH...AS」的可讀性比較高，並且因為其查詢結果會變成一個暫時的表格，因此對效能也有幫助。我們同樣以"歌曲包含幾種語言"示範如下，各位可以跟前面的另外兩種方法比較看看</p>
<pre class="brush: sql">
WITH
	dstn_lang AS (SELECT DISTINCT(language) as langs FROM song)
SELECT COUNT(dstn_lang.langs) FROM dstn_lang</pre><br>


</blockquote>

</body></html>
